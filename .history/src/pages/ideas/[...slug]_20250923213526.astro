---
import { type CollectionEntry, getCollection } from "astro:content";
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime } from "@lib/utils";
import BackToPrev from "@components/BackToPrev.astro";
import Link from "@components/Link.astro";

export async function getStaticPaths() {
  const ideas = (await getCollection("ideas"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return ideas.map((idea) => ({
    params: { slug: idea.slug },
    props: idea,
  }));
}
type Props = CollectionEntry<"ideas">;

export async function determineStage(progress: number) {
  if (progress === 0) return "seed";
  if (progress < 50) return "sprout";
  if (progress < 100) return "dormant";
  return "bloom";
}

const idea = Astro.props;
const { Content } = await idea.render();

const stage = await determineStage(idea.data.progress);

const stageStyles = {
  seed:   "bg-gray-50 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700",
  sprout: "bg-gray-50 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700",
  dormant:"bg-gray-50 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700",
  bloom:  "bg-gray-50 text-gray-700 border-gray-200 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-700",
};
const stageLabel = (s: string) => ({seed:"Seed üå±",sprout:"Sprout üåø",dormant:"Dormant üçÇ",bloom:"Bloom üå∏"}[s] || s);
---

<PageLayout title={idea.data.title} description={idea.data.description}>
  <Container>
    <div class="animate">
      <BackToPrev href="/ideas">Back to ideas</BackToPrev>
    </div>

    <div class="space-y-1 my-10">
      <div class="animate text-2xl font-semibold text-black dark:text-white">{idea.data.title}</div>
      <div class="animate text-sm text-gray-600 dark:text-gray-400">{idea.data.description}</div>

      <div class="animate flex flex-wrap items-center gap-2 text-sm text-gray-500">
        <FormattedDate date={idea.data.date} />
        <span>&bull;</span>
        <span>{readingTime(idea.body)}</span>
        {idea.data.timeEstimate && (<><span>&bull;</span><span>{idea.data.timeEstimate}</span></>)}
        {idea.data.skills?.length ? (
          <ul class="flex gap-1.5 flex-wrap py-1.5">
            {idea.data.skills.map((s: string) => (
              <li class="px-2 py-1.5 rounded-full bg-gray-100 dark:bg-gray-800 text-gray-700 dark:text-gray-300">{s}</li>
            ))}
          </ul>
        ) : null}
      </div>

      <div class={`animate inline-flex items-center gap-2 text-sm border px-3.5 py-1.5 rounded-full ${stageStyles[stage] || ""}`}>
        <span class="font-medium">{stageLabel(stage)}</span>
        <span class="sr-only">progress</span>
        <span>&bull;</span>
        <div class="w-32 h-1.5 bg-gray-200/70 rounded overflow-hidden">
          <div class="h-full bg-current" style={`width:${idea.data.progress || 0}%`}></div>
        </div>
        <span>&bull;</span>
        <span>{idea.data.progress || 0}%</span>
      </div>
    </div>

    <section class="animate space-y-8">
      <!-- Summary -->
      <div>
        <h2 class="text-lg font-semibold">Summary</h2>
        <p class="mt-2 text-gray-800 dark:text-gray-200">{idea.data.summary}</p>
      </div>

      <!-- Description (MD body) -->
      <div>
        <h2 class="text-lg font-semibold">Description</h2>
        <article class="prose dark:prose-invert max-w-none mt-2">
          <Content />
        </article>
      </div>

      <!-- Initial Research -->
      {idea.data.initialResearch?.length ? (
        <div>
          <h2 class="text-lg font-semibold">Research Log</h2> 
          <details class="mt-3">  
            <summary class="cursor-pointer">Show research log ({idea.data.initialResearch.length} entries)</summary> 
            <ul class="mt-3 space-y-2">
              {idea.data.initialResearch.map((r: any) => (
                <li class="p-3 rounded-lg border border-gray-200/60 dark:border-zinc-800">
                  <div class="font-medium">
                    {r.url ? <a href={r.url} target="_blank" rel="noopener" class="underline">{r.title}</a> : r.title}
                  </div>
                  {r.note && <p class="text-sm text-gray-600 dark:text-gray-400 mt-1">{r.note}</p>}
                </li>
              ))}
            </ul>
          </details>
        </div>
      ) : null}


      <!-- Progress Log -->
      {idea.data.progressLog?.length ? (
        <div>
          <h2 class="text-lg font-semibold">Progress Log</h2>
          <details class="mt-3">
            <summary class="cursor-pointer">Show progress log ({idea.data.progressLog.length} entries)</summary>
            <ol class="mt-3 space-y-2">
              {idea.data.progressLog.map((l: any) => (
                <li class="p-3 rounded-lg border border-gray-200/60 dark:border-zinc-800">
                  <span class="font-medium">{l.date}</span> ‚Äî {l.note}
                </li>
              ))}
            </ol>
          </details>
        </div>
      ) : null}

      <!-- Optional: Resources (demo/repo) -->
      {(idea.data.demoURL || idea.data.repoURL) && (
        <div>
          <h2 class="text-lg font-semibold">Resources</h2>
          <nav class="mt-2 flex items-center gap-3">
            {idea.data.demoURL && <Link href={idea.data.demoURL} external>demo</Link>}
            {idea.data.repoURL && <Link href={idea.data.repoURL} external>repo</Link>}
          </nav>
        </div>
      )}
    </section>
  </Container>
</PageLayout>
